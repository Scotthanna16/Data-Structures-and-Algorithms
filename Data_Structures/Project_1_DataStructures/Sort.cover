    1: import random
    1: import copy
    1: import sys
       
    1: def insertion_sort(arr):
  100:   for k in range(1,len(arr)):
   99:     cur = arr[k]
   99:     j = k
 2580:     while j>0 and arr[j-1] > cur:
 2481:       arr[j] = arr[j-1]
 2481:       j = j-1
   99:     arr[j] = cur
       
    1: def selection_sort(arr):
  101:   for k in range(0,len(arr)):
  100:         minloc=k
  100:         j=k+1
 5050:         while j<len(arr):
 4950:             if arr[j]<arr[minloc]:
  321:                 minloc=j
 4950:             j=j+1
  100:         x=arr[k]
  100:         arr[k]=arr[minloc]
  100:         arr[minloc]=x
       
    1: if __name__ == '__main__':
         # The list sys.argv contains everything the user typed on the command 
         # line after the word python. For example, if the user types
         # python Sort.py 10000 increasing
         # then printing the contents of sys.argv shows
         # ['Sort.py', '10000', 'increasing']
         # Note that the contents are all strings and may 
         # need to be converted as appropriate.
    1:   if len(sys.argv) < 3 or not sys.argv[1].isnumeric or sys.argv[2] not in ('increasing','decreasing','random'):
           # This means the user did not provide the required arguments.
           # Show the correct usage.
           print('Usage: python Sort.py <array_length> <increasing|decreasing|random>')
         else:
    1:     if sys.argv[2] == "increasing":
             # this syntax for generating a list is called "list comprehension"
             insertion_arr = [i for i in range(int(sys.argv[1]))]
    1:     elif sys.argv[2] == "decreasing":
             insertion_arr = [int(sys.argv[1])-i for i in range(int(sys.argv[1]))]
    1:     elif sys.argv[2] == "random":
             # the _ symbol is a placeholder for a variable whose value is ignored
  102:       insertion_arr = [random.randint(0, 1000000000) for _ in range(int(sys.argv[1]))]
    1:     selection_arr = copy.deepcopy(insertion_arr)
    1:     insertion_sort(insertion_arr)
    1:     selection_sort(selection_arr)
           #
           # Uncomment these two print lines to test with small arrays.
           #print(insertion_arr)
           #print(selection_arr)
         
